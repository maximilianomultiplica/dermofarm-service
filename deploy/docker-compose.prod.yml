version: '3.8'

services:
  api:
    build:
      context: ..
      dockerfile: Dockerfile
      target: production
    container_name: dermofarm-api-prod
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    env_file:
      - .env.prod
    environment:
      - NODE_ENV=production
      - IS_DOCKER=true
    depends_on:
      sqlserver:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${PORT:-3000}/api"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - dermofarm-network-prod

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: dermofarm-sqlserver-prod
    restart: unless-stopped
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${DB_PASSWORD:-StrongProductionPassword!}
      - MSSQL_PID=Express
      - MSSQL_TCP_PORT=1433
    volumes:
      - sqlserver_prod_data:/var/opt/mssql
      - ../init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U ${DB_USER:-sa} -P "${DB_PASSWORD:-StrongProductionPassword!}" -Q "SELECT 1" || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - dermofarm-network-prod

volumes:
  sqlserver_prod_data:
    driver: local

networks:
  dermofarm-network-prod:
    driver: bridge 